@inherits LayoutComponentBase

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Class="shadow-light" Elevation="1">
        <MudIconButton Class="hover-primary icon-button-light" Icon="@Icons.Material.Filled.Menu" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudIconButton Class='hover-primary icon-button-light' Href="/" Icon="@Icons.Custom.Brands.MudBlazor" />
       <MudSpacer />
       <div>
            <MudTooltip Class="ml-4" Text="Search" Arrow="true" Placement="Placement.Bottom">
                <MudIconButton Class='ml-4 hover-primary icon-button-light' Icon="@Icons.Material.Outlined.Search" Edge="Edge.End" />
            </MudTooltip>
            <MudTooltip Class="ml-4" Text="Cart" Arrow="true" Placement="Placement.Bottom">
                <MudIconButton Class='ml-4 hover-primary icon-button-light' Icon="@Icons.Material.Outlined.ShoppingCart" Edge="Edge.End" />
            </MudTooltip>
            <MudTooltip Class="ml-4" Text="Account" Arrow="true" Placement="Placement.Bottom">
                <MudIconButton Class='ml-4 hover-primary icon-button-light' Icon="@Icons.Material.Outlined.AccountCircle" Edge="Edge.End" />
            </MudTooltip>
        </div>
    </MudAppBar>
    <MudDrawer Class="shadow-light" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {

    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#f0f0f0", //changed
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "#060302", //changed
        DrawerBackground = "#060302", //changed
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#060302",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#f0f0f0", //changed
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}


